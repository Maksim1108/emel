const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 8080;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
const TELEGRAM_CONFIG = {
    botToken: process.env.TELEGRAM_BOT_TOKEN || '8031704621:AAFuySRHLHR8DGGo8A1fJnEH3l0q8_IllMM',
    chatId: process.env.TELEGRAM_CHAT_ID || '-1002335444341',
    channelUsername: process.env.TELEGRAM_CHANNEL_USERNAME || 'emel_orders'
};

// –¶–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
const PRICES = {
    '0.5': 50,
    '1': 80,
    '1.5': 100
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_CONFIG.botToken, { polling: false });

// Middleware –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname)));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
function validateOrderData(data) {
    const required = ['name', 'phone', 'email', 'product', 'quantity'];
    const errors = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required.forEach(field => {
        if (!data[field] || data[field].trim() === '') {
            errors.push(`–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`);
        }
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (data.email && !emailRegex.test(data.email)) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneRegex = /^[\+]?[0-9]{10,15}$/;
    if (data.phone && !phoneRegex.test(data.phone.replace(/\D/g, ''))) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const quantity = parseInt(data.quantity);
    if (isNaN(quantity) || quantity < 1 || quantity > 100) {
        errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    if (data.product && !PRICES[data.product]) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç');
    }

    return {
        isValid: errors.length === 0,
        errors
    };
}

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
function sanitizeData(data) {
    const sanitized = {};
    for (const [key, value] of Object.entries(data)) {
        if (typeof value === 'string') {
            sanitized[key] = value.replace(/[<>]/g, '').trim();
        } else {
            sanitized[key] = value;
        }
    }
    return sanitized;
}

// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
function formatTelegramMessage(data) {
    const now = new Date();
    const dateStr = now.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });

    const price = PRICES[data.product] || 0;
    const total = price * parseInt(data.quantity);

    return `
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:
üìÖ –î–∞—Ç–∞: ${dateStr}
üì¶ –ü—Ä–æ–¥—É–∫—Ç: ${data.product} –ª
üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${data.quantity}
üí∞ –¶–µ–Ω–∞: ${price} —Å–æ–º
üíµ –ò—Ç–æ–≥–æ: ${total} —Å–æ–º
üë§ –ò–º—è: ${data.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
üìß Email: ${data.email}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment || '–ù–µ—Ç'}
üåê –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.source || '–í–µ–±-—Å–∞–π—Ç'}
    `.trim();
}

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.post('/api/orders', async (req, res) => {
    try {
        const orderData = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        const validation = validateOrderData(orderData);
        if (!validation.isValid) {
            return res.status(400).json({
                success: false,
                errors: validation.errors
            });
        }

        // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        const sanitizedData = sanitizeData(orderData);

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const message = formatTelegramMessage(sanitizedData);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        await bot.sendMessage(TELEGRAM_CONFIG.chatId, message, {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
            disable_notification: false
        });

        res.json({
            success: true,
            message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞:', error);
        
        res.status(500).json({
            success: false,
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞',
            error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ü–µ–Ω
app.get('/api/prices', (req, res) => {
    res.json({
        success: true,
        prices: PRICES
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
    console.error('Server error:', error);
    res.status(500).json({
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
});

// 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ, –ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
// –°–Ω–∞—á–∞–ª–∞ –æ–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ API, –ø–æ—Ç–æ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –æ—Ç–¥–∞–µ—Ç 404
app.use('*', (req, res) => {
    res.status(404).json({
        success: false,
        message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('SIGINT –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    process.exit(0);
}); 